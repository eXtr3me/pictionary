{"version":3,"sources":["components/card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","word","value","App","state","words","randomIndex","rndIndex","Math","floor","random","this","length","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAGaA,G,MAAO,SAAAC,GAClB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,iBAAf,SAEF,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,cAAcD,EAAME,KAAKC,cCoErCC,G,wDA3Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,CACL,CAAEH,MAAO,WACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,eACT,CAAEA,MAAO,WACT,CAAEA,MAAO,cACT,CAAEA,MAAO,eACT,CAAEA,MAAO,2BACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,WACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,cACT,CAAEA,MAAO,aACT,CAAEA,MAAO,cACT,CAAEA,MAAO,cACT,CAAEA,MAAO,YACT,CAAEA,MAAO,YACT,CAAEA,MAAO,UACT,CAAEA,MAAO,SACT,CAAEA,MAAO,eACT,CAAEA,MAAO,SACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,WACT,CAAEA,MAAO,SACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,cACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,aACT,CAAEA,MAAO,SACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,WACT,CAAEA,MAAO,aACT,CAAEA,MAAO,cACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,WACT,CAAEA,MAAO,YACT,CAAEA,MAAO,WACT,CAAEA,MAAO,kBAEXI,YAAa,GAxDH,E,gEA6DZ,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKP,MAAMC,MAAMO,QAC7DD,KAAKE,SAAS,CAAEP,YAAaC,M,+BAGrB,IAAD,EACwBI,KAAKP,MAA5BE,EADD,EACCA,YAAaD,EADd,EACcA,MACrB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAMC,KAAMI,EAAMC,U,GAtERQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b17c54b7.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.scss';\n\nexport const Card = props => {\n  return (\n    <div className=\"row\">\n      <div className=\"card\">\n        <div className=\"card__side card__side--front\">\n          <div className=\"card__picture\">&nbsp;</div>\n        </div>\n        <div className=\"card__side card__side--back\">\n          <div className=\"card__cta\">\n            <div className=\"card__word-box\">\n              <p className=\"card__word\">{props.word.value}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Component } from 'react';\nimport { Card } from './components/card.component';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      words: [\n        { value: 'Picking' },\n        { value: 'Expedição' },\n        { value: 'Receção' },\n        { value: 'Armazenagem' },\n        { value: 'Entrega' },\n        { value: 'Transporte' },\n        { value: 'Fiabilidade' },\n        { value: 'Redução de custos' },\n        { value: 'Planificação' },\n        { value: 'Descarga' },\n        { value: 'Registo' },\n        { value: 'Inventário' },\n        { value: 'Cliente' },\n        { value: 'Fornecedor' },\n        { value: 'Camião' },\n        { value: 'Plataforma' },\n        { value: 'Mercadoria' },\n        { value: 'Conferir' },\n        { value: 'Etiqueta' },\n        { value: 'Palete' },\n        { value: 'Caixa' },\n        { value: 'Conteúdo' },\n        { value: 'Stock' },\n        { value: 'Guia de Transporte' },\n        { value: 'Anomalia' },\n        { value: 'Registo' },\n        { value: 'Carga' },\n        { value: 'Desembalagem' },\n        { value: 'Descarga' },\n        { value: 'Quantidade' },\n        { value: 'Arrumação' },\n        { value: 'Referência' },\n        { value: 'Espaço' },\n        { value: 'Tempo' },\n        { value: 'Porta Paletes' },\n        { value: 'Separação' },\n        { value: 'Distância' },\n        { value: 'Tarefa' },\n        { value: 'Mão de obra' },\n        { value: 'Documentação' },\n        { value: 'Pedido' },\n        { value: 'Destino' },\n        { value: 'Encomenda' },\n        { value: 'Prioridade' },\n        { value: 'Movimentação' },\n        { value: 'Informação' },\n        { value: 'Pesagem' },\n        { value: 'Área' },\n        { value: 'Percurso' },\n        { value: 'Estante' },\n        { value: 'Escritório' }\n      ],\n      randomIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    const rndIndex = Math.floor(Math.random() * this.state.words.length);\n    this.setState({ randomIndex: rndIndex });\n  }\n\n  render() {\n    const { randomIndex, words } = this.state;\n    return (\n      <div className=\"App\">\n        <Card word={words[randomIndex]} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}